//
// This file is generated by grafana-app-sdk
// DO NOT EDIT
//

package apis

import (
	"encoding/json"

	"github.com/grafana/grafana-app-sdk/app"
)

var (
	rawSchemaRolev0alpha1     = []byte(`{"spec":{"properties":{"displayName":{"type":"string"},"group":{"type":"string"},"name":{"type":"string"},"permissions":{"description":"delegatable?: bool\nhidden?: bool\n\n\ncreated?\nupdated?","items":{"properties":{"Scope":{"description":"RBAC scope (e.g: \"dashboards:uid:dash1\")","type":"string"},"action":{"description":"RBAC action (e.g: \"dashbaords:read\")","type":"string"}},"required":["action","Scope"],"type":"object"},"type":"array"},"uid":{"type":"string"},"version":{"type":"integer"}},"required":["name","displayName","uid","version","group","permissions"],"type":"object"},"status":{"properties":{"additionalFields":{"description":"additionalFields is reserved for future use","type":"object","x-kubernetes-preserve-unknown-fields":true},"operatorStates":{"additionalProperties":{"properties":{"descriptiveState":{"description":"descriptiveState is an optional more descriptive state field which has no requirements on format","type":"string"},"details":{"description":"details contains any extra information that is operator-specific","type":"object","x-kubernetes-preserve-unknown-fields":true},"lastEvaluation":{"description":"lastEvaluation is the ResourceVersion last evaluated","type":"string"},"state":{"description":"state describes the state of the lastEvaluation.\nIt is limited to three possible states for machine evaluation.","enum":["success","in_progress","failed"],"type":"string"}},"required":["lastEvaluation","state"],"type":"object"},"description":"operatorStates is a map of operator ID to operator state evaluations.\nAny operator which consumes this kind SHOULD add its state evaluation information to this field.","type":"object"}},"type":"object"}}`)
	versionSchemaRolev0alpha1 app.VersionSchema
	_                         = json.Unmarshal(rawSchemaRolev0alpha1, &versionSchemaRolev0alpha1)
)

var appManifestData = app.ManifestData{
	AppName: "authz",
	Group:   "authz.grafana.app",
	Kinds: []app.ManifestKind{
		{
			Kind:       "Role",
			Scope:      "Namespaced",
			Conversion: false,
			Versions: []app.ManifestKindVersion{
				{
					Name:   "v0alpha1",
					Schema: &versionSchemaRolev0alpha1,
				},
			},
		},
	},
}

func jsonToMap(j string) map[string]any {
	m := make(map[string]any)
	json.Unmarshal([]byte(j), &j)
	return m
}

func LocalManifest() app.Manifest {
	return app.NewEmbeddedManifest(appManifestData)
}

func RemoteManifest() app.Manifest {
	return app.NewAPIServerManifest("authz")
}
